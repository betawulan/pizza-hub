// Code generated by mockery v2.34.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/betawulan/pizza-hub/model"
	mock "github.com/stretchr/testify/mock"
)

// ChefRepository is an autogenerated mock type for the ChefRepository type
type ChefRepository struct {
	mock.Mock
}

// AddChef provides a mock function with given fields: ctx, chef
func (_m *ChefRepository) AddChef(ctx context.Context, chef model.Chef) (model.Chef, error) {
	ret := _m.Called(ctx, chef)

	var r0 model.Chef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Chef) (model.Chef, error)); ok {
		return rf(ctx, chef)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Chef) model.Chef); ok {
		r0 = rf(ctx, chef)
	} else {
		r0 = ret.Get(0).(model.Chef)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Chef) error); ok {
		r1 = rf(ctx, chef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChefRepository creates a new instance of ChefRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChefRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChefRepository {
	mock := &ChefRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
